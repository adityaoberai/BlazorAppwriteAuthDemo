@rendermode InteractiveServer
@using AppwriteDemo.Services
@using Appwrite.Models
@inject AppwriteService AppwriteService
@inject NavigationManager Navigation
@inject ILogger<NavMenu> Logger

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AppwriteDemo</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
   
        @if (!isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="signup">
                    <span class="bi bi-person-plus-fill-nav-menu" aria-hidden="true"></span> Sign Up
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="signin">
                    <span class="bi bi-box-arrow-in-right-nav-menu" aria-hidden="true"></span> Sign In
                </NavLink>
            </div>
        }

        @if (isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="account">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Account
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="todos">
                    <span class="bi bi-list-check-nav-menu" aria-hidden="true"></span> Todos
                </NavLink>
            </div>
        }
    </nav>

    <!-- Sign Out Button at Bottom -->
    @if (isLoggedIn)
    {
        <div class="position-absolute bottom-0 w-100 p-3">
            <button class="btn btn-danger w-100 text-center" @onclick="HandleSignOut" disabled="@isSigningOut">
                @if (isSigningOut)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Signing out...</span>
                }
                else
                {
                    <span> Sign Out</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private bool isSigningOut = false;
    private bool isLoggedIn = false;
    private User? user;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthStatus();
    }

    private async Task CheckAuthStatus()
    {
        try
        {
            user = await AppwriteService.GetLoggedInUserAsync();
            isLoggedIn = user != null;
        }
        catch
        {
            isLoggedIn = false;
        }
    }

    private async Task HandleSignOut()
    {
        try
        {
            isSigningOut = true;
            Logger.LogInformation("NavMenu: User is signing out");
            
            await AppwriteService.SignOutAsync();
            
            Logger.LogInformation("NavMenu: Sign out successful, redirecting to signin");
            Navigation.NavigateTo("/signin", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NavMenu: Error during sign out");
            isSigningOut = false;
        }
    }
}